package news

import (
	"encoding/json"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/toffernator/digest/utils"
)

// DrResponse is autogenerated based on the JSON response from dr using the tool https://transform.tools/json-to-go
type DrResponse struct {
	Data struct {
		FrontPage struct {
			TopStories []struct {
				URL     string      `json:"url"`
				Title   string      `json:"title"`
				Live    bool        `json:"live"`
				Channel interface{} `json:"channel"`
				Image   struct {
					URL    string `json:"url"`
					Width  int    `json:"width"`
					Height int    `json:"height"`
				} `json:"image"`
				Article struct {
					Type         string `json:"type"`
					Urn          string `json:"urn"`
					URL          string `json:"url"`
					Title        string `json:"title"`
					Format       string `json:"format"`
					Publications []struct {
						Breaking       bool `json:"breaking"`
						Live           bool `json:"live"`
						ServiceChannel struct {
							Urn string `json:"urn"`
						} `json:"serviceChannel"`
					} `json:"publications"`
					Summary     string    `json:"summary"`
					StartDate   time.Time `json:"startDate"`
					TeaserImage struct {
						Default struct {
							URL string `json:"url"`
						} `json:"default"`
					} `json:"teaserImage"`
					TeaserVideo interface{} `json:"teaserVideo"`
					Head        []struct {
						Type string `json:"type"`
					} `json:"head"`
					Contributions []struct {
						Agent struct {
							Name string `json:"name"`
						} `json:"agent"`
					} `json:"contributions"`
					Site struct {
						URL          string `json:"url"`
						Urn          string `json:"urn"`
						Title        string `json:"title"`
						Presentation struct {
							Colors struct {
								Primary struct {
									Brand struct {
										Solid string `json:"solid"`
										Text  string `json:"text"`
									} `json:"brand"`
									Interaction struct {
										Solid string `json:"solid"`
										Text  string `json:"text"`
									} `json:"interaction"`
								} `json:"primary"`
								Secondary struct {
									Brand struct {
										Solid string `json:"solid"`
										Text  string `json:"text"`
									} `json:"brand"`
									Interaction struct {
										Solid string `json:"solid"`
										Text  string `json:"text"`
									} `json:"interaction"`
								} `json:"secondary"`
							} `json:"colors"`
						} `json:"presentation"`
					} `json:"site"`
				} `json:"article"`
			} `json:"topStories"`
		} `json:"frontPage"`
	} `json:"data"`
	Extensions struct {
		DeprecatedUsages []string `json:"deprecatedUsages"`
	} `json:"extensions"`
}

type DrReader struct {
	src string
	url string
}

func NewDrReader() *DrReader {
	return &DrReader{src: DR, url: "https://www.dr.dk/tjenester/steffi/graphql?query=fragment%20ArticleTeaser%20on%20Article%20%7B%20type%3A%20__typename%20urn%20url%20title%20format%20publications%20%7B%20...on%20ArticlePublication%20%7B%20breaking%20live%20serviceChannel%20%7B%20urn%20%7D%20%7D%20%7D%20summary%20startDate%20teaserImage%20%7B%20default%20%7B%20url%20%7D%20%7D%20teaserVideo%20%7B%20type%3A%20__typename%20resource%20%7B%20type%3A%20__typename%20...%20on%20Channel%20%7B%20slug%20%7D%20...%20on%20ProgramCard%20%7B%20urn%20%7D%20...%20on%20ProgramCardBundle%20%7B%20items(limit%3A%201)%20%7B%20__typename%20urn%20%7D%20%7D%20%7D%20%7D%20head%20%7B%20type%3A%20__typename%20...%20on%20MediaComponent%20%7B%20resource%20%7B%20type%3A%20__typename%20...%20on%20ProgramCard%20%7B%20primaryAsset%20%7B%20durationInMilliseconds%20%7D%20%7D%20...%20on%20ProgramCardBundle%20%7B%20items(limit%3A%201)%20%7B%20primaryAsset%20%7B%20durationInMilliseconds%20%7D%20%7D%20%7D%20%7D%20%7D%20...%20on%20ImageCollectionComponent%20%7B%20images%20%7B%20default%3A%20image(key%3A%20%22default%22)%20%7B%20type%3A%20__typename%20%7D%20%7D%20%7D%20%7D%20contributions(limit%3A%201)%20%7B%20agent%20%7B%20...%20on%20Person%20%7B%20name%20%7D%20%7D%20%7D%20site%20%7B%20url%20urn%20title%20presentation%20%7B%20colors%20%7D%20%7D%20%7D%20query%20NewsOverview%20%7B%20frontPage(id%3A%20%225d023c534ff3c845599d0953%22)%20%7B%20topStories%20%7B%20url%20title%20live%20channel%20%7B%20slug%20%7D%20image%20%7B%20url%20width%20height%20%7D%20article%20%7B%20...ArticleTeaser%20%7D%20%7D%20%7D%20%7D"}
}

func (r *DrReader) Src() string {
	return r.src
}

func (r *DrReader) Read() []Article {
	resp, err := http.Get(r.url)
	utils.Must(err)
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	utils.Must(err)

	var drArticles DrResponse
	err = json.Unmarshal(body, &drArticles)
	utils.Must(err)

	articles := make([]Article, len(drArticles.Data.FrontPage.TopStories))
	for _, a := range drArticles.Data.FrontPage.TopStories {
		article := Article{
			Title:   a.Title,
			Summary: a.Article.Summary,
			Author:  a.Article.Contributions[0].Agent.Name,
			Date:    a.Article.StartDate,
			Url:     a.URL,
		}

		articles = append(articles, article)
	}

	return articles
}
